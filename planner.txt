Plans for 02/03/2023:
     1. The planner file has been added to track my activities
     2. server app has minor revision(I added the connections feature)
     3. client app has been revised to get the friend and room list from mysql server and connect to the server
     4. Planning to add data entry screen for this planner file
     5. Need another revision of this IDE. Planned revisions:
        1. I have observed that the whole program(including this IDE) crashes whenever the called screens encounter critical error
        2. To avoid this error, I will redesign this IDE in such a way to trap errors from the called screen and display it on the error pane.
        3. My initial solution: To be checked further but has created a prototype and it work to test my hypothesis.         

Plans for 02/04/2023:
     1. make sure that at least, users are able to login and communicate with other users
     2. Continue updating the Protocol Documentation
     3. Update if necessary the readme file
     4. Do more planning
     5. From yesterday's 5th item or task, I have solved the problem by using OS to execute DOS commands in different threads so from there I can trap the error encountered and display into the error pane and the IDE will not crash. I am not sure though if this solution is the best practice, need to confirm this by researching but for now, I am happy with this solution. 
     6. Revised the readme file to ommit the description about creating a class that inherits the QSubWindow because I was able to simplify the solution to the issue.
     7. Revised the readme file again to describe how this IDE is evolving to include a Content Management system.

Plans for 02/05/2023:
     1. Continue working on the task started in 02/04/2023
     2. Continue updating the Protocol Documentation
     3. Update if necessary the readme file
     4. Do more planning
     5. It is very inconvenient to use this IDE without the intelligent auto indentation at least, I really must do something to implement this.
        Plans how to implement Intelligent Auto Indentation:
          1. The program must be able to identify python commands
          2. If it recognized for and and the end is ":", when the user press the enter key, the cursor should copy the leadin spaces of the previous line and add 4 spaces and when the next line is for example just used print command, the next line should just copy the number of trailing spaces of the previous line.
          3. I am thinking whether to use Machine Learning or just store those commands in a local database but would not an ideal solution, I am definitely considereng ML as the top contender as a solution.

Plans for 02/06/2023:
    1. The solution I have implemented from 5th items or task in 02/04/2023 no longer works. My suspect is that either a very intelligent burglar came in and modified certain system environment variables of python that prevents my solution from working or it could be that Windows Defender recognized the operation of my solution as something that a virus is programmed to perform that will be confirm by researching. I think the latter is most likely the culprit because yes it seem that it really looks a virus because my solution is capturing the errors from another application. Windows Defender could have considered the activity evesdropping or beaconing. 

Plans for 02/07/2023:
   1. I did a little research about yesterday's task and no topic found about this scenario and it seems that Windows defender blocks a whole application not certain functions of an application and still not contented with this, another idea came to my mind that in order to prove that Windows Defender has nothing to do with this is by disabling it and run the program again and thats what I just did and nothing different was found. There moght be a variable inside python that weas changed by this very intelligent burglar. At least the whole application no longer crash whenever the called application by the IDE crashes, but the error is no longer being captured and displayed on the error pane, but the error is getting displayed on the dos terminal.

Plans for 02/09/2023:
    1. Auto indentation has been implemented already. My implementation is very simple, I did not have to use machine learning or a database. The logic is jusst copy the number of leading spaces and if the line ends with a ":" then upon pressing the enter key, it should add 4 spaces to the existing number of spaces.
   2. I should add a mini texteiditor at the lower portion of the file list pane for proofreading a paragraph.

Plan for 02/11/2023:
    1. I am planning to start working on the debugger. Here's my planned logic:
        - Create a function that will allow  a programmer to insert a breakpoint
        - If no breakpoint is inserted, dubugging starts on the first executable line
        - the debug window should embed the cmd terminal(this is dificult to implement)
        - debug window should display the code and the current line where it stopped
        - to pause a program, I will insert an invisible input command at each line but when a breakpoint is specified autmatically will remove the input command before the breakpoint is reached
        - user will enter the variable name at the input terminal to display the current value
        
Plan for 02/13/2023:
    1. Continiue working on the IDE Debugger Window. I was able to embed the cmd terminal window on a PyQt TextEdit.
    2. Tommorow I will try to implementthe actual debugging window. Actually I already experimented with pdb and works just fine, so That would be so awe some already. But it still lacks the interactivity.
    3. I will still use pdb as the debugger but the entering of variables to monitor and execution of the line and insertion of breakes will be enhanced.
    
Plan for 02/15/2023:
    1. Added proof reading text editor widget below the file list widget, it is very useful, it is good for proof reading from a few sentences to a just a full paragraph.
    2. As the entries in the planner increases, it is becoming inconvenient to use, hence, the need to create a data netry and be saved on a database instead of just text file
    3. I love this new IDE with the implementation of auto indent, it is very convenient to use, it can really improve productivity
    4. The git software has builtin version comparison functions, therefore, it would be really so easy to implement because I do not have to start from scratch.

Plan for 02/16/2023:
    1. I will further improve this IDE
    2. Implement the synchronization between the server and the client which should include the adding of user password as 5th layer, retrieval of any messages which are not yet delivered and messages should not be lost when new message arrives.
    3. Planned implementation of old unread messages should not be lost when new message arrives:
        - messages should not just be a string variable but instead should keep on scanning the local Sqlite3 database for any messagaes whose status is 'sent' or 'delivered' and display them on the appropriate chat window
        - scanning of new messages should be done every minute
        - will check if it is possible to modify the font style of an item in the qlist widget(to make it bold and change its color if new messages arrive)
    4. I will further try to solve the problem stated in in 02/07/2023. Windows Defender has nothing to do with the process but I succeeded in embedding the cmd.exe and was able to display its stream on a qtextedit which is exactly what I am looking for but was for a different scenario. It may work though on this particular scenario which I am trying to solve because I have observed that the trace errors are getting displayed on the terminal window.
    
Plan for 02/20/2023:
    1. Task #4 from 02/16/2023 has been solved and implemented. I used the same command I used in the "Check Syntax" button. critical error logs generated by the python program can now be displayed on the error pane. Critical errors causes the python program to crash, having this error displayed in the IDE's error pane is a major milestone, I'm glad that it has been solved already.

Plan for 02/21/2023:
    1. Separated the file server.py to a subfolder server in the project root directory. This is needed because it will also have config.py and functions.py just like the client program popchat.py.
    2. Added the server, config and functions in the file list pane but with a blue font color to distinguish these files from other files to avoid confusion. 
    3. I am thinking if this IDE will be permanently embeded within the chat application to enable users to fully customize the application but I do not have the detailed plans how to implement this yet. Some of the questions that need some answers are how it will look like? How will it be integrated to the Chat application? Should the server and client app be integrated as weell? How does deployment of custom programs be implemented? 

Plan for 02/22/2023:
    1. Encryption of password from client app will use a simple RSA encryption. RSA encryption is the world's strongest encryption algorithm. Once the server receives the encrypted password, it will decrypt it and encrypt it again with SHA256. The password stored at the database is encrypted with SHA256 and with Salt to fortify it even further and could not be decrypted by hackers. 
    2. Currently implementing user authentication at server level. But I have under estimated the complexity of this task, I have to carefully plan the revision. Here are some of the foreseen steps on how to implemnent this:
        a) The basic Process:
            - User enter username and password then clicks Login button
            - at setLogin method, the password entered will be encrypted, then connects to server, waits for server to respond with 'USER', once received, the app at WorkerThread class will then send the user and the encrypted password, if the server received successsfuly the respond of the client app, it will decode the encrypted password and check if it exists in mysql table tbusr, it user found, it will notify the user and save it usual but if no user found, it will notify the client with 'NOUSER' and will not leave the login screen
            
Plan for 02/23/2023:
    1. Code Editor has now Code Syntax Hilighter implemented but only for classes, defined functions or methods, commented lines and some keywords like import, self, if, else, elif. I also hilighted the most frequently used words which is unique to my project(not a standard Python Keyword) like the update and config. I will soon modify this further to include the keywords or commands and those text enclosed with single and double quotes.
    2. With the code highlighter implemented, there is a need to separate the document editor from the code editor, will soon implement this as well
    3. I also noticed that the document and code editor lack the keyboard shortcut functions which sometimes I forget(I am more accustomed to using the ctlr+s to save changes), leaving certain changes not being saved. I will also implement this soon.
    4. also there is a need to add tabbed widget and split screen features.
    5. Design Strategy for the Document Editor: The QtextEdit widget supports HTML/CSS formattinng, therefore, I plan to separate the HTML raw format Editor from the Document previewer screen. 
    6. In the maintime, I will continue the implementation of the user authentication at server level because the app is currently not working.

Plan for 02/24/2023:
    1. Users are now getting authenticated at server level but the planned implementation as mentioned in 02/22/2023 Task 2 was changed, here is the new process:
        a) The basic process:
            - User enter username and password then clicks Login button
            - at setLogin method, the password entered will be encrypted, then connects to server, then starts the workerthread process.
            - at worker thread process waits for server to respond with 'USER', once received, the app at WorkerThread class will then send the user 
            - server will tehn send 'OK' 
            - once the client app receives tehe word 'OK' it will send the encrypted password
            - if the server received successfuly the respond of the client app, it will decode the encrypted password and check if it exists in mysql table tbusr, if user found, it will notify the client app with 'OKUSER' and cotinue with original process which is alraedy in place but if no user found, it will notify the client app with 'NOUSER' and will not leave the login screen to wait for the user to enter again his username and password. Do note that while the login screen is displayed, all widgets are disabled leaving the user no other choice but to enter his valid credentials or exit the application.
    
Plan for 02/25/2023:
    1. Currently implementing the following:
        a. messages should not be lost when new messages arrives
        b. friends list box will be enhanced to change colors and indacates how many unread messages from a particular friend or room. 
        c. Here is how I plan to implement this:
            - User send message. Client app will save the messages to local sqlite3 database
            - Server app recieves the message then save it to MySql database then end it to the intended recepient(actually broadcast it to all registered users which I am still planning to enhance in the near future)
            - The client app receives the message and on the chat window(Showtime function), will save it to sqlite3 local database 
            - On the same Showtime function, will then change the appropriate sender's foreground color and indicates how many unread messages 
            - When user clicks the sender the chat window will appear and on its entry / paint event, will update the status of the message, restores the foreground color of the clicked sender and remove the number of unread messages
            - Also consider the scenario when the client app is loading will repeat the appropriate steps to display the most updated information
            - As each steps updates the status of the message, the client app will appropriately send the message id and status to the server to synchronize the data between server and client app 
            
Plan for 02/26/2023:
    1. During my test, when a user enters an invalid credential, and user reenter the valid credential, it seems that the worker thread is not getting re executed or server is not listening to port anymore? It is subject for further testing and check where the error is. Plans how to solve this:
        a. To test whether the workerthread is getting executed or not is to put some print command and repeat the above scenario, if no print goes out during the stage when user reenter the valid credentials then I am right, if it gets reexecuted then the problem is in the server
        b. if the server is the one causing the error, then print commands must be inserted at kay locations, my initial guess is it the connection between the client app and server app is still active, so the connection request is being ignored by the server?
        c. Test Result: yes the workerthread is still getting reexecuted and the server is working fine too. Upon further checking and debugging, the problem is found at the timing of sending/receiving of messages between client and server app during the handshake process. Oh so glad that this problem is considered solved.
        d. Feedback of my user experience during this pressured problem solving scenario. If I would describe my experience, it is not yet near the perfect IDE but in terms of encoding of program, it is fine already but not so good yet(I need to check occasionally the location of the cursor which is yet to be implemented). This is when the debugging function is realy going to be of great help if it will be implemented already. The error pane is still not so good, i will still have to execute the program at DOS command because I need to check the result getting printed on the terminal. But I already have a code snippet how to stream the print result to a Qrexteditwidget, would really be so halpful if that feature is implemented, perhaps a completely redesigned debugging environment will be needed. The print commands are to be considered breakpoints. See how many print comments I have insterted during this bug tracing. The debugging window is really a game changer if it will be implemented the right way similar to SAP or VB6
        
Plan for 02/27/2023:
    1. after a brief detour, I am continuiing the  planned tasks  stated in 02/25/2023
    2. Current status:
        a. The communication protocol has a fifth layer which is the message id. The mesages are first saved in the server and this is when the message id is generated and should be sent to the recepients(pls do note that this message is stil being received by the sender, so when a user create a message, there is still no message id).
        b. Every users should have local database of their own in eevry terminal they use to login to the system.
    3. I noticed another error again during login which I may prioritize to work on tomorrow. The error occurs when user enter the incorrect password and then re-enter the correct passord. This did not occured as I was testing yesterday. I did several testing yesterday and the result was very consistent, it was only this morning that this error occured, it is not random because I have confirmed it already by rpeating the same scenario several times.
    
Plan for 02/28/2023:    
    1. Previous messages are now getting displayed at the chat subwindow.
    2. Foreground color of the friend's name changes to red when new messages arrives and when clicked, goes back to black foreground(font color)
    3. The error encountered as stated in task 3 02/27/2023 has been solved. The error that causes it not to retrieve friends list is the variable that stores the database name has been accumulating alot of values as the login button is clicked so I fixed it that the assignment of value should happen only once. 
    4. Messages having been delivered to a receiver's terminal is now being updated at the server as well. Also tested the scenario when a reciever is still offline and it is still in sent status. Next is to retrieve those messages at the server having status 'SENT' when a reciever goes online and subsequently update the message status to 'DELV'.
    
Plan for 03/01/2023: 
    1. Messages with status 'SENT' at the server are now getting updated when a user logs in. The user is the receiver of the sent message and was offline when the message was sent. 
    2. Update the Communication prototl documentaion because there a number changes made.   
    3. I will try to move other codes from the showTime method(the method called to display the current time and called every 1 second) because I noticed that one of the problems I encountered was cause by this method. The error encountered was some of the blocks of codes does not get executed within this method.
    4. Current Status: 
        - Basic Chat Communication is in place, users can send receive messages
        - Messages are saved on a MySql back end database at the server
        - Messages are saved on SqLite3 back end database at the client
        - Users may use the same terminal because each users have their own instance of the SqLite3 database(auto creation of the database is not yet supported)
        - User should now login to the system with their own password
        - User authentication takes place at the server
        - Big chnages was made in the handshake process because of the user authentication process
        - The synchronization of message status(DELIVERD) is now implemented
        - Whenever there is a new message, the foreground color of the sender changes from black to red and when clicked, changes back to black
        - The IDE has now auto indentation, syntax hilighting, small pane for proofreading paragraphs feature.
        - The IDE no longer crashes when the called program crashes and is able to chatch the trace error of the program that crashed and display it on the error pane
    5. What's Next:
        - User Registration will be implemented(the registration screen has already been implemented but not functioning yet)
        - After user registration, will add features that enable users to send friend requests or room membership invites.
        - With the IDE having Syntax Highlighting implemented, there is a need to display the text documents on a separate Text Editor Widget
        - The Text Editor should evovle to a Rich Text Editor, meaning, There is a separate editor and a document previewer.
        - Keyboard shortcuts such as cotrol-s for saving the file, control-f for searching a keyword(the words must be hilighted) must implemented
        - Cursor tracking must be implemented
    6. Moving on, freezing version 4 and saved to folder c:\popchat\popchat_v4, the one I am going to edit from now on is in forlder c:\popchat\popchat_v5
    7. Design Strategy of User Registration Porcess:
        - Upon clicking the 'Register' button, the app will connect to the server
        - when the server sends 'USER' the client app will then reply 'REGISTER' 
        - the server will initiate the registration process(meaning it will bypass the user authontication process and wait for registration data from the client app) by sending 'OKREG'
        - User fills up the form then press the 'REgister' Button
        - the app will validate any invalid inputs, if inputs are ok, it will send the data to server having the following format: 'REGRN:username:Email:FullName'  
        - the password could not be sent to the rest of the registration data, if the server was able to receive it it will send 'OKPWD'
        - If the client recieves this "OKPWD' it beging to encrypt the password just like in user authentication process and sendsit to the server
        - Server will validate the registration data, once evrything is ok, it will save it to the database and sends 'REGNSUCC', if it is not ok, it will send back'REGNERR:error code number'.
    8. Input validation is now complete. I just copied the existing input validation I used in my Desktop Application Template. 

Plan for 03/02/2023: 
    1. User Registration is working already. Next is auto creation of database and tables and the friend invites
    2. Auto creation of database and tables is now working
    3. Planned Implementation of Friend Invites and acceptance:
        - From the pull down menu, user select friends then add
        - a subwindow appears. this subwindow should allow users to query existing user from the server and allow users to send invitations to friends who have not yet registered to the system. It will send the invite via email notification.
        - a friend request notification from the server to the client app should show up(this requires a button at the top of thechat history viewer widget should appear)
        - a table at mysql database must be created to store friend invites
    4. The IDE is really getting a lot bigger and this Chat Application as well. It is difficult to maintain several copies of the software and I have to mark the revisions in text document with new for any new features or process. There is really a need to implememnt the version management system.
    
Plan for 03/03/2023:
    1. Currently changing the managing friends process. The new process is a user can add anytime friends. No need for acceptance to the other end the who added the friends will see his freind's useraname at the orginal list widget, but when the other recieves the message it will appear on Other Messages pane at the right side.
    2. The message protocol from the sender who added the friend will be the same but the server will check if the receiver is his friend if he is a friend, the message format will be the same but if not, the message is 'OTH:sender:receiver:message:message id'.
    3. Currently the screen for adding a fried is already in place.
    
Plan for 03/06/2023:
    1. Cursor tracking has already been implemented. The cursor location can be seen at the right-bottom most of the IDE Screen.
    
Plan for 03/08/2023:
    1. The chat app project was temporarily stopped as I was busy designing the IDE project and to be more specific, I am currently designing the Dubugging Window and collecting code snippets and here is what I have accomplished so far:
        - prepared a code snippet for creating a custom arrow widget that draws and arrow where ever the cursor is. This will serve as an indicator that the program was halted at that line.
        - prepared a code snippet for listing all defined variables within a program and displays its current values
        - prepared a code snippet to insert a breakpoint(I would still want to change this though)
        - prepared a code snippet to reroute the output generated by the program being debugged to a text edit widget
        - currently preparing the code snippet to execute 1 line at a time during debugging
    2. The code editor has now been separated from the text editor.

Plan for 03/11/2023:
    1. I will still on a break to relieve the pressure that has build over the months. Need to relax quite a bit and will be back soon. And this would also a good excercise whether I can still remember what I have left and continue as planned, I actually revisited my logs and it seems that my activities and plans were thoroughly documented.

Plan for 03/12/023:
   1. I could not help it, I have done some more research about the IDE project and one the issues encountered is the saving and restoring the cursor position and I have prepared a code snippet for it. 
   2. Planning to work on this project may be after 3 days